// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}
model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tournaments   Tournament[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Tournament {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  logo      String
  ownerId   String   @db.ObjectId
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rounds    Round[] @relation("TournamentRounds")
  groups    Group[] @relation("TournamentGroups")
  teams     Team[] @relation("TournamentTeams")
  matches   Match[] @relation("TournamentMatches")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  primaryColor String
  secondaryColor String
  textColor1 String
  textColor2 String
  @@map("tournaments")
}

model Round {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  tournamentId String     @db.ObjectId
  tournament   Tournament @relation("TournamentRounds", fields: [tournamentId], references: [id], onDelete: Cascade)
  matches      Match[]
  teams        Team[]
  groups       Group[] @relation("RoundGroups")
  numberOfDays Int @default(0)


  @@map("rounds")
}

model Match {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  matchNo   Int
  name      String
  roundId   String       @db.ObjectId
  mapId     String       @db.ObjectId
  round     Round        @relation(fields: [roundId], references: [id], onDelete: Cascade)
  map       Map          @relation(fields: [mapId], references: [id])
  startTime DateTime
  endTime   DateTime?
  tournamentId String   @db.ObjectId
  groupId   String?      @db.ObjectId
  group     Group?       @relation(fields: [groupId], references: [id])
  tournament Tournament @relation("TournamentMatches", fields: [tournamentId], references: [id], onDelete: Cascade)
  @@map("matches")
}

model Team {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  teamTag   String? @default("")
  logo      String?
  email     String?
  phone     String? 

  players   Player[]
  groupId   String?      @db.ObjectId
  group     Group?       @relation(fields: [groupId], references: [id])
  tournamentId String   @db.ObjectId
  tournament   Tournament @relation("TournamentTeams", fields: [tournamentId], references: [id], onDelete: Cascade)
  roundId String?   @db.ObjectId
  round   Round?    @relation(fields: [roundId], references: [id], onDelete: SetNull)
  isSelected Boolean @default(false)
  @@map("teams")
}

model Player {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  ign     String
  role    String?
  teamId  String  @db.ObjectId
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  image   String? @default("")
  email   String?
  phone   String?
  @@map("players")
}

model Group {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  tournamentId String      @db.ObjectId
  tournament   Tournament  @relation("TournamentGroups", fields: [tournamentId], references: [id], onDelete: Cascade)
  teams        Team[]
  matches      Match[]
  roundId      String?      @db.ObjectId
  round        Round?       @relation("RoundGroups", fields: [roundId], references: [id], onDelete: Cascade)
  @@map("groups")
}

model Map {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  matches Match[]
  mapImage String?

  @@map("maps")
}




model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}




